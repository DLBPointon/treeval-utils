use clap::{Parser, Subcommand, ValueEnum};

const TUTILS_LOGO: &str = "
==========================================================
 _______         __   __  _______  ___   ___      _______
|       |       |  | |  ||       ||   | |   |    |       |
|_     _| ____  |  | |  ||_     _||   | |   |    |  _____|
  |   |  |____| |  |_|  |  |   |  |   | |   |    | |_____
  |   |         |       |  |   |  |   | |   |___ |_____  |
  |   |         |       |  |   |  |   | |       | _____| |
  |___|         |_______|  |___|  |___| |_______||_______|
==========================================================
";

#[derive(Copy, Debug, Clone, PartialEq, Eq, PartialOrd, Ord, ValueEnum)]
pub enum DType {
    Pep,
    Cdna,
    Rna,
    Cds,
    Other,
}

#[derive(Copy, Debug, Clone, PartialEq, Eq, PartialOrd, Ord, ValueEnum)]
pub enum OType {
    File,
    StdOut,
    Pipeline,
}

#[derive(Copy, Debug, Clone, PartialEq, Eq, PartialOrd, Ord, ValueEnum)]
pub enum OriginType {
    Other,
    Ensembl,
    Ncbi,
}

// CLI
#[derive(Parser, Debug)]
#[command(
    name = "Treeval UTILS",
    author="Damon-Lee Pointon (DLBPointon / dp24)",
    version="v0.0.1",
    about = format!("{}\nA program for preparing the data needed for TreeVal execution", TUTILS_LOGO),
    long_about = None)
]
pub struct Cli {
    #[command(subcommand)]
    pub command: Option<Commands>,
}

#[derive(Subcommand, Debug)]
pub enum Commands {
    #[command(
        name = "sizesplit",
        about = "Prepare the Geneset data into the expected structure",
        long_about = format!("This function will split the input genome into chunks roughly equal to a user given amount of memory (given in bytes, e.g. 1000000 == 1mb). The input will be split into as close to the user given about as possible, for example if a scaffold is larger than 1mb, it will not be split up.")
    )]
    PrepGenesetBySize {
        // Path to the TreeVal yaml file generated by the user
        #[arg(short = 'f', long, help = "Path to the input FASTA file")]
        fasta_file: String,

        // Chunk size
        #[arg(
            short = 's',
            long = "memory_size",
            default_value_t = 50,
            value_parser = clap::value_parser!(usize),
            help="Size, in Megabyes, that the output files should try to match"
        )]
        chunk_size: usize,

        #[arg(
            short = 'd',
            long = "data_type",
            value_enum,
            help = "Data type of the input fasta file"
        )]
        data_type: DType,

        #[arg(
            short = 'r',
            long = "origin_db",
            value_enum,
            help = "Data type of the input fasta file"
        )]
        origin_db: OriginType,

        #[arg(
            short = 'c',
            long = "clean_headers",
            value_parser = clap::value_parser!(bool),
            help = "Choose whether to clean the headers"
        )]
        sanitise: bool,

        #[arg(
            short = 'o',
            long = "output-directory",
            default_value = "./",
            help = "The output directory that files will be placed in"
        )]
        outpath: String,
    },
    #[command(
        name = "sizesplit2",
        about = "Prepare the Geneset data into the expected structure",
        long_about = format!("This function will split the input genome into chunks roughly equal to a user given amount of memory (given in bytes, e.g. 1000000 == 1mb). The input will be split into as close to the user given about as possible, for example if a scaffold is larger than 1mb, it will not be split up.")
    )]
    PrepGenesetBySize2 {
        // Path to the TreeVal yaml file generated by the user
        #[arg(short = 'f', long, help = "Path to the input FASTA file")]
        fasta_file: String,

        // Chunk size
        #[arg(
            short = 's',
            long = "memory_size",
            default_value_t = 50,
            value_parser = clap::value_parser!(usize),
            help="Size, in Megabyes, that the output files should try to match"
        )]
        chunk_size: usize,

        #[arg(
            short = 'd',
            long = "data_type",
            value_enum,
            help = "Data type of the input fasta file"
        )]
        data_type: DType,

        #[arg(
            short = 'r',
            long = "origin_db",
            value_enum,
            help = "Data type of the input fasta file"
        )]
        origin_db: OriginType,

        #[arg(
            short = 'c',
            long = "clean_headers",
            value_parser = clap::value_parser!(bool),
            help = "Choose whether to clean the headers"
        )]
        sanitise: bool,

        #[arg(
            short = 'o',
            long = "output-directory",
            default_value = "./",
            help = "The output directory that files will be placed in"
        )]
        outpath: String,
    },

    #[command(
        name = "splitcount",
        about = "Prepare the Geneset data into the expected structure",
        long_about = format!("Split the input genome into the user given number of records per file, e.g. -s 100 will split the genome into 100 records per file.")
    )]
    PrepGenesetByCount {
        // Path to the TreeVal yaml file generated by the user
        #[arg(short = 'f', long, help = "Path to the input FASTA file")]
        fasta_file: String,

        // Chunk size
        #[arg(
            short = 's',
            long = "split_into",
            default_value_t = 100,
            value_parser = clap::value_parser!(usize),
            help="Number of records to split the input genome into."
        )]
        chunk_size: usize,

        #[arg(
            short = 'd',
            long = "data_type",
            value_enum,
            help = "Data type of the input fasta file"
        )]
        data_type: DType,

        #[arg(
            short = 'r',
            long = "origin_db",
            value_enum,
            help = "Data type of the input fasta file"
        )]
        origin_db: OriginType,

        #[arg(
            short = 'c',
            long = "clean_headers",
            value_parser = clap::value_parser!(bool),
            help = "Choose whether to clean the headers"
        )]
        sanitise: bool,

        #[arg(
            short = 'o',
            long = "output-directory",
            default_value = "./",
            help = "The output directory that files will be placed in"
        )]
        outpath: String,
    },

    #[command(
        name = "generate_csv",
        about = "Generate a CSV file which describes the GENESET folder structure",
        long_about = "Given the directory containing the GENESET data, this function will generate csv's for each geneset contained inside"
    )]
    GenerateCSV {
        #[arg(
            short = 'i',
            long = "input-directory",
            default_value = "./",
            help = "The output directory that files will be placed in"
        )]
        folder_path: String,
    },

    #[command(
        name = "yaml_check",
        about = "Generate a CSV file which describes the GENESET folder structure",
        long_about = "Given the directory containing the GENESET data, this function will generate csv's for each geneset contained inside"
    )]
    YamlCheck {
        #[arg(
            short = 'y',
            long = "input-yaml",
            default_value = "./Treeval.yaml",
            help = "The input TreeVal yaml file"
        )]
        input_yaml: String,

        #[arg(
            short = 'o',
            long = "output_type",
            value_enum,
            help = "How to return the data",
            long_help = "There is a difference, honestly"
        )]
        out_type: OType,
    },
}
